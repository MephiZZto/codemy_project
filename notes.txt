superuser: admin
pw: 123

#install apps pip
pip install django

#see give out installed apps
pip freeze

#create start django project
django-admin.py startproject PROJECTNAME

#run webserver
python manage.py runserver

#create app in django project
python manage.py startapp APPNAME

-edit settings.py in PROJECTNAME and add app to INSTALLED_APPS =
-edit PROJECTNAME/urls.py add include include
-edit PROJECTNAME/urls.py path('', include('APPNAME.urls'))
-edit APPNAME/urls.py path('', views.home, name="home"),
-create urls.py in APPNAME folder and add path('', views.home, name="home")
-edit views.py in APPNAME folder
-create templates folder and an APPNAME folder inside
-create home.html in templates/events and fill with html

#get request
-urls.py path('<int:year>/<str:month>', views.home, name="home")
-view def home(request, year, month):
	return render(request, 'APPNAME/home.html', {
		"year": year,
		"month": month,
	})
-template {{ month }}</br>{{ year }}

#make extended templates {% block content %}{% endblock %}
- {% extends 'events/base.html' %}

#add models for database makemirations migrate after

#add things to admin site in admin.py register models

#change admin area view in admin.py

#add forms
- create forms.py file in App import libs and:
	class NAMEXX(ModelForm):
		class Meta:
		model = MODELNAME
		#fields = "__all__"
- in views.py add forms
def VIEWNAME(request):
	form = NAMEXX
	return render(request, 'path/file.html', {'form':form})
- in file.html for view
	<form action="" method="POST">
		{% csrf_token %}
		{{ form.as_p }}
		<input type="submit" value="Submit" class="btn btn-secondary"\>
	</form>
#to change the django form we can add fixed variables in class Meta: in forms.py
		#labels (discription) with
		labels = {'name': 'Venue Name', 'email': ''}
		#css for the form elements with
		widgets = {'name': forms.TextInput(attrs={'class':'form-control', 'placeholder':'Venue Name'}),}
#to auto fill a form with search use instance=MODEL.objects.get(pk=venue_id)
#db query .filter or .order_by()

#config admin section in project folder urls.py
#fully edit admin css only possible in django lib under venv/Lib/site-packages/django/contrib/admin/static/admin/css

#messages method
- from django.contrib.messages import messages in views.py
- messages.success(request, ("There was an error login in, try again!")) in views.py
- add to a html file (base.html maybe?)
		{% if messages %}
		{% for message in messages %}
			<div class="alert alert-warning alert-dismissible fade show" role="alert">
				<strong>{{ message }}</strong>
				<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
			</div>
		{% endfor %}
	{% endif %}

#user auth system
-create new app and add app to settings.py
-create urls.py file in app
-add paths in urls.py main project folder with normal path and:
	path('APPNAME/', include('django.contrib.auth.urls')),
	path('APPNAME/', include('APPNAME.urls')),
-create templates folders with an "authenticate" folder (name not important)
-add from django.contrib.auth import authenticate, login, logout to views.py
-if {% if user.is_authenticated %} on .html to show things or not {% if user == event.manager %} || alternative decorators
-add more then the standard fields create forms.py import from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User from django import forms
-add class RegisterUserForm(UserCreationForm): (inherit UserCreationForm and adds:)
#diff forms for diff users
-create diffrent form in form.py and do if if request.user.is_superuser: in views.py
#uploading images and making media folder
-import os in settings.py
-add media root in settings.py
-import # imports for our media and static folder in urls.py (base project folder)
	from django.conf import settings
	from django.conf.urls.static import static
-add path in urls.py (base project folder) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
-add in model image field with right type
-add <form action="" method="POST" enctype="multipart/form-data"> in form in html file
-add request.FILES in views.py when creating form (form = VenueForm(request.POST, request.FILES))
#custom field to calculate query data in models.py 	
	@property
	def Days_till(self):
		return 41
#how to remove groups in admin.py
	from django.contrib.auth.models import Group
	admin.site.unregister(Group)
#static folder for .js .css stuff
-create /static/APPNAME folder
-add {% load static %} to html file